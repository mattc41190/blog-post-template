html
  head
    link(href="https://fonts.googleapis.com/css?family=PT+Sans+Narrow|Raleway" rel="stylesheet")
    link(href='./style.css' rel='stylesheet' )
  body
    div.blog-container
      header
        div.blog-header
          h1.blog-title Raspberry Cat
          h2.blog-tagline Setting up your Raspberry Pi to be a Tom Cat server
      main
        div.blog-content-container
          p.content I am not a great Java developer. In fact, I would hardly consider myself a good or passable java developer. I am script writer. I like Python and I like Node.js. I like to write small single concern applications and walk away.
          p.content This is actually not such a bad skill set. I have a nice little job, I like my work, and I feel well liked and well compensated for the work I do.
          p.content All that in mind, I am still definitley interested in improving my Java skills. The way I originally learned programming was by taking some small project and trying to do it from start to finish. The key is that each project was self contained and singularly purposed. As I finished my little demo projects I could post them to GitHub, archive them locally or delete them entirely without having useless chunks of code left hanging around on my computer in unknowable places. The only dependencies that I had on my machine were the languages themselves, and their respective package managers. One of the joys of working with Node and Python is that they both have a defacto package manager that is endorsed by the maintainers of the language. All dependencies for the small projects (what few there were) were all kept together with the project itself. I have on several occassions failed to learn Java in the same way. Let's talk about what I found out.
          h3.blog-point Java Tooling Is Part of The Language 
          p.content If you attempt to find a tutorial on the internet for learning Java in a standalone fashion you will quickly find yourself in the proverbial weeds. You will either find yourself doing it the right way, and by that I mean reading the Oracle Java documentation page by page in a not so user friendly . 
